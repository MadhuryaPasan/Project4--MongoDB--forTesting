start CLI
        -->mongosh

to clear CLI 
        -->cls

to show all db
        --show dbs

to use db (now using admin db for example)
        -->use admin

to create new db name school
        -->use school

to add collection to the school db
        -->db.createCollection("students")

to drop bd
        -->db.dropDatabase()
     
**also, we can create database using MongoDB compass



insert(if there is no collection name student it will create one for you)
        -->db.student.insertOne({name:"Spongebob",age:30,gpa:3.2})

insert 3 at the same time (using an array)
        -->db.student.insertMany([{name:"Patrick",age:38,gpa:1.5},{name:"Sandy",age:37,gpa:4.0},{name:"Gary",age:18,gpa:2.5}])

** you can create these using compass (for one normal way , for many with an array)

view data 
        -->db.student.find()


data types
        name: 'Spongebob'                   -->String
        age: 30                             -->Integer
        gpa: 3.2                            -->Double
        fullTime : true                     -->Boolean
        Date : new Date()                   -->Date     [Current date & time]
        Date : new Date("2025-01-12T00:00:00")   [Custom]
        graduationDate:null                 -->null     [to fill it later]
        courses:["Bio","chemist","IT"]      --> raise   [filed that can have more than one value]
        address: {street:"123 Fake st." , city: "Bikini Bottom" , zip:1234} --> nested documents


        db. studentDTypes. insertOne({name : " Larry" ,age: 32,gpa: 2.8,fullTime: false,registerDate :new Date(),gradutionDate: null,courses: ["Biology" ,"Chemistry","Calculus " ] ,address: {street: "123 Fake St.",city: "Bikini Bottom",zip:123}})


Sort
        db.student.find().sort({name:1}) --> alphabetical order
        db.student.find().sort({name:-1}) --> reverse alphabetical order
        db.student.find().sort({gpa:1}) --> ascending order
        db.student.find().sort({gpa:-1}) --> descending order

limit(limit the documents that are returned to us)
        db.student.find().limit(1)  --> return one. currently these are sorted by id
        db.student.find().sort({gpa:-1}).limit(1)   -->return highest gpa
        db.student.find().sort({gpa:1}).limit(1)   -->return lowest gpa

**can do with the compass. select options


25.90  find







